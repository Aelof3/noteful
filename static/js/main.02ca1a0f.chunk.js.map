{"version":3,"sources":["components/context/DefaultContext.js","components/NoteItem.js","components/sections/MainSection.js","components/FolderItem.js","components/sections/SidebarSection.js","errors/ErrorBoundary.js","components/routes/FolderRoute.js","components/routes/MainRoute.js","components/routes/NoteRoute.js","components/routes/NotFoundRoute.js","components/AddFolder.js","components/AddNote.js","components/sections/HeaderSection.js","App.js","index.js"],"names":["DefaultContext","React","createContext","updateStore","url","NoteItem","deleteNote","fetch","context","props","id","method","headers","then","r","history","push","catch","e","Error","message","this","name","modified","folderId","content","d","Date","data-id","className","location","pathname","includes","to","toLocaleString","onClick","Component","contextType","withRouter","MainSection","getNoteList","store","notes","map","note","key","getBottomContents","FolderItem","deleteFolder","getRidOfMe","forEach","SidebarSection","getFolderList","folders","folder","getBottomButton","getFolderName","find","ErrorBoundary","state","hasError","children","error","FolderRoute","filter","MainRoute","NoteRoute","NotFoundRoute","class","AddFolder","handleOnSumbit","form","FormData","get","length","addFolder","data","body","JSON","stringify","onSubmit","preventDefault","target","htmlFor","type","required","AddNote","f","toISOString","addNote","i","value","HeaderSection","App","getFolders","getNotes","json","setState","contextValue","Provider","exact","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.02ca1a0f.chunk.js","sourcesContent":["import React from 'react';\n\nconst DefaultContext = React.createContext({\n    updateStore: () => {},\n    url: 'https://rocky-dawn-01034.herokuapp.com'\n    //url: 'http://localhost:8000'\n})\n\nexport default DefaultContext;","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport DefaultContext from './context/DefaultContext';\nimport PropTypes from 'prop-types';\n\nclass NoteItem extends Component {\n    static contextType = DefaultContext;\n    deleteNote = () => {\n        fetch(`${this.context.url}/notes/${this.props.id}`, {\n            method: 'DELETE',\n            headers: {\n              'content-type': 'application/json'\n            },\n          })\n          .then( r=>{\n            this.context.updateStore();\n            this.props.history.push('/');\n          })\n          .catch( e => {\n              throw new Error(`Error deleting note: ${e.message}`);\n          } );;\n    }\n    render(){\n        const { id, name, modified, folderId, content, history } = this.props;\n        const d = new Date(modified);\n        \n        return (\n            <li data-id={folderId} className={`note--item ${history.location.pathname.includes(id) ? 'note--item--checked' : ''}`}>\n                <Link \n                    className=\"note--item--link\"\n                    to={`/note/${id}`}\n                >\n                    {name}\n                </Link>\n                <div className=\"section--row\">\n                    <p className=\"note--item--modified\">{`Date modified on ${d.toLocaleString()}`}</p>\n                    <button \n                        onClick={this.deleteNote}\n                        className=\"note--item--delete\"\n                    >\n                        Delete Note\n                    </button>\n                </div>\n                <p className=\"note--item--content hidden\">{content}</p>\n            </li>\n       );\n    }\n}\n\nNoteItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    modified: PropTypes.string.isRequired,\n    folderId: PropTypes.string.isRequired,\n    content: PropTypes.string,\n    store: PropTypes.object.isRequired\n}\n\nexport default withRouter(NoteItem);","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport NoteItem from '../NoteItem';\nimport DefaultContext from '../context/DefaultContext';\nimport PropTypes from 'prop-types';\n\nclass MainSection extends Component {\n    static contextType = DefaultContext;\n\n    getNoteList = () => {\n        if ( typeof this.props.store !== \"object\" ) return;\n        \n        return this.props.store.notes.map(note => {\n            return (\n                <NoteItem\n                    key={note.id}\n                    id={note.id}\n                    name={note.name}\n                    modified={note.modified}\n                    folderId={note.folderId}\n                    content={note.content}\n                    store={this.props.store}\n                />\n            );\n        });\n    }\n    getBottomContents = () => {\n        if ( !this.props.history.location.pathname.includes(`/note/`) ) return (\n            <Link \n                to={`/add-note/`}\n                className=\"note--item--add\"\n            >\n                Add Note\n            </Link>\n        );\n        return (<p className=\"note--item--content\">{this.props.store.notes[0].content}</p>);\n    }\n    render(){\n        return (\n            <main className=\"section--main\">\n                <ul>\n                    {this.getNoteList()}\n                </ul>\n                <div className=\"section--row\">\n                    {this.getBottomContents()}\n                </div>\n            </main>\n       );\n    }\n}\n\nMainSection.propTypes = {\n    store: PropTypes.object.isRequired\n}\n\nexport default withRouter(MainSection);","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport DefaultContext from './context/DefaultContext';\nimport PropTypes from 'prop-types';\n\nclass FolderItem extends Component {\n    static contextType = DefaultContext;\n\n    deleteNote = (id) => {\n        fetch(`${this.context.url}/notes/${id}`, {\n            method: 'DELETE',\n            headers: {\n              'content-type': 'application/json'\n            },\n          })\n          .then( r=>{\n            this.context.updateStore();\n          })\n          .catch( e => {\n              throw new Error(`Error deleting note: ${e.message}`);\n          } );;\n    }\n    deleteFolder = (id) => {\n        fetch(`${this.context.url}/folders/${id}`, {\n            method: 'DELETE',\n            headers: {\n              'content-type': 'application/json'\n            },\n        })\n        .then( r => {\n            this.context.updateStore();\n            this.props.history.push('/');\n        } )\n        .catch( e => {\n            throw new Error(`Error deleting folder: ${e.message}`);\n        } );;\n    }\n    getRidOfMe = () => {\n        // remove all notes with this folder id\n        this.props.store.notes.forEach( note => {\n            if ( note.folderId === this.props.id ) this.deleteNote( note.id );\n        } );\n        // remove this folder\n        this.deleteFolder( this.props.id );\n    }\n\n    render(){\n        const { id, name, history } = this.props;\n\n        return (\n            <li key={id} className={`folder--item ${history.location.pathname.includes(id) ? 'folder--item--checked' : ''}`}>\n                <Link \n                    to={`/folder/${id}`}\n                >\n                    {name}\n                </Link>\n                <button \n                className=\"folder--item--delete\"\n                onClick={()=>this.getRidOfMe()}>delete</button>\n            </li>\n       );\n    }\n}\n\nFolderItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    store: PropTypes.object.isRequired\n}\n\nexport default withRouter(FolderItem);\n","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport FolderItem from '../FolderItem';\nimport DefaultContext from '../context/DefaultContext';\nimport PropTypes from 'prop-types';\n\nclass SidebarSection extends Component {\n    static contextType = DefaultContext;\n    getFolderList = () => {\n        if ( typeof this.props.store !== \"object\" || this.props.history.location.pathname.includes(\"/note/\") ) return;\n        return this.props.store.folders.map(folder => {\n            return (\n                <FolderItem\n                    key={folder.id}\n                    id={folder.id}\n                    name={folder.name}\n                    store={this.props.store}\n                />\n            );\n        });\n    }\n    getBottomButton = () => {\n        if ( !this.props.history.location.pathname.includes(\"/note/\") ) {\n            return (\n            <Link \n                to={`/add-folder/`}\n                className=\"folder--item--add\"\n            >\n                Add Folder\n            </Link>);\n        }\n\n        return (<Link \n                    to={`/`}\n                    className=\"button--back\"\n                >\n                    Go back\n                </Link>\n        );\n    }\n    getFolderName = () => {\n        if (this.props.history.location.pathname.includes(\"/note/\")) {\n            const folder = this.props.store.folders.find( folder => {\n                return folder.id === this.props.store.notes[0].folderId\n            } );\n            return (\n                <h3>Folder: {folder.name}</h3>\n            )\n        }\n    }\n    render(){\n        return (\n            <section className=\"section--sidebar\">\n                <ul>\n                    {this.getFolderList()}\n                </ul>\n                {this.getBottomButton()}\n                {this.getFolderName()}\n            </section>\n       );\n    }\n}\n\nSidebarSection.propTypes = {\n    store: PropTypes.object.isRequired\n}\n\nexport default withRouter(SidebarSection);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ErrorBoundary extends React.Component {\n    state = {\n        hasError: false\n    }\n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n    }\n    render() {\n        if (this.state.hasError) {\n            return (\n                <h2>{this.props.message}</h2>\n            );\n        }\n        return this.props.children;\n    }\n}\n\nErrorBoundary.propTypes = {\n    message: PropTypes.string\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport MainSection from '../sections/MainSection';\nimport SidebarSection from '../sections/SidebarSection';\nimport { withRouter } from 'react-router-dom';\nimport ErrorBoundary from '../../errors/ErrorBoundary';\nimport PropTypes from 'prop-types';\n\nclass FolderRoute extends Component {\n    render(){\n        const store = {\n            notes: this.props.store.notes.filter( note => this.props.history.location.pathname.includes(note.folderId) ),\n            folders: this.props.store.folders\n        }\n\n        return (\n            <div className=\"App\">\n                <ErrorBoundary message=\"Sidebar Section Error\">\n                    <SidebarSection \n                        store={store}\n                    />\n                </ErrorBoundary>\n                <ErrorBoundary message=\"Main Section Error\">\n                    <MainSection \n                        store={store}\n                    />\n                </ErrorBoundary>\n\n            </div>\n       );\n    }\n}\n\nFolderRoute.propTypes = {\n    store: PropTypes.object.isRequired\n}\n\nexport default withRouter(FolderRoute);\n","import React, { Component } from 'react';\nimport MainSection from '../sections/MainSection';\nimport SidebarSection from '../sections/SidebarSection';\nimport { withRouter } from 'react-router-dom';\nimport ErrorBoundary from '../../errors/ErrorBoundary';\nimport PropTypes from 'prop-types';\n\nclass MainRoute extends Component {\n    render(){\n        return (\n            <div className=\"App\">\n                <ErrorBoundary message=\"Sidebar Section Error\">\n                    <SidebarSection \n                        store={this.props.store}\n                    />\n                </ErrorBoundary>\n                <ErrorBoundary message=\"Main Section Error\">\n                    <MainSection \n                        store={this.props.store}\n                    />\n                </ErrorBoundary>\n            </div>\n       );\n    }\n}\n\nMainRoute.propTypes = {\n    store: PropTypes.object.isRequired\n}\n\nexport default withRouter(MainRoute);","import React, { Component } from 'react';\nimport MainSection from '../sections/MainSection';\nimport SidebarSection from '../sections/SidebarSection';\nimport { withRouter } from 'react-router-dom';\nimport ErrorBoundary from '../../errors/ErrorBoundary';\nimport PropTypes from 'prop-types';\n\nclass NoteRoute extends Component {\n    render(){\n        const store = {\n            notes: this.props.store.notes.filter( note => this.props.history.location.pathname.includes(note.id) ),\n            folders: this.props.store.folders\n        }\n        return (\n            <div className=\"App\">\n                <ErrorBoundary message=\"Sidebar Section Error\">\n                    <SidebarSection \n                        store={store}\n                    />\n                </ErrorBoundary>\n                <ErrorBoundary message=\"Main Section Error\">\n                    <MainSection \n                        store={store}\n                    />\n                </ErrorBoundary>\n\n            </div>\n       );\n    }\n}\n\nNoteRoute.propTypes = {\n    store: PropTypes.object.isRequired\n}\n\nexport default withRouter(NoteRoute);","import React, { Component } from 'react';\n\nclass NotFoundRoute extends Component {\n    render(){\n        return (\n            <div class=\"error\">\n                <div class=\"error--spacer\"></div>\n                <h2 class=\"error--message\">404 Not Found</h2>\n            </div>\n       );\n    }\n}\n\nexport default NotFoundRoute;","import React, { Component } from 'react';\nimport SidebarSection from './sections/SidebarSection';\nimport DefaultContext from './context/DefaultContext';\nimport { withRouter } from 'react-router-dom';\nimport ErrorBoundary from '../errors/ErrorBoundary';\nimport PropTypes from 'prop-types';\n\nclass AddFolder extends Component {\n    static contextType = DefaultContext;\n    handleOnSumbit = (form) => {\n        const f = new FormData(form);\n        const name = f.get(\"folderName\");\n        if ( typeof name !== \"string\" || name.length <= 0 ) return;\n        this.addFolder({name:name});\n    }\n    addFolder = (data) => {\n        fetch(`${this.context.url}/folders/`, {\n            method: 'POST',\n            headers: {\n              'content-type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        })\n        .then( r => {\n            this.context.updateStore();\n            this.props.history.push('/');\n        } )\n        .catch( e => {\n            throw new Error(\"Error creating folder\");\n        } );\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <ErrorBoundary message=\"Sidebar Section Error\">\n                    <SidebarSection \n                        store={this.props.store}\n                        history={this.props.history}\n                    />\n                </ErrorBoundary>\n                <ErrorBoundary message=\"Main Section Error\">\n                    <main className=\"section--main\">\n                        <form\n                            className=\"add--form\"\n                            onSubmit={(e)=>{\n                                e.preventDefault();\n                                this.handleOnSumbit(e.target);\n                            }}\n                        >   \n                            <div className=\"add--form--field\">\n                                <label htmlFor=\"folderName\">Folder name:</label>\n                                <input type=\"text\" id=\"folderName\" name=\"folderName\" required />\n                            </div>\n                            <div className=\"add--form--field\">\n                                <button type=\"submit\">Submit</button>\n                            </div>\n                        </form>\n                    </main>\n                </ErrorBoundary>\n            </div>\n        )\n    }\n}\n\nAddFolder.propTypes = {\n    store: PropTypes.object.isRequired\n}\n\nexport default withRouter(AddFolder);","import React, { Component } from 'react';\nimport SidebarSection from './sections/SidebarSection';\nimport DefaultContext from './context/DefaultContext';\nimport { withRouter } from 'react-router-dom';\nimport ErrorBoundary from '../errors/ErrorBoundary';\nimport PropTypes from 'prop-types';\n\nclass AddNote extends Component {\n    static contextType = DefaultContext;\n    handleOnSumbit = (form) => {\n        const f = new FormData(form);\n        const data = {\n            name: f.get(\"noteName\"),\n            modified: new Date().toISOString(),\n            content: f.get(\"noteContent\"),\n            folderId: f.get(\"folderId\")\n        }\n        this.addNote(data);\n    }\n    addNote = (data) => {\n        fetch(`${this.context.url}/notes/`, {\n            method: 'POST',\n            headers: {\n              'content-type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        })\n        .then( r=>{\n            this.context.updateStore();\n            this.props.history.push('/');\n        })\n        .catch( e => {\n            throw new Error(\"Error creating note\");\n        } );\n    }\n    getFolderList = () => {\n        if ( typeof this.props.store !== \"object\" || this.props.history.location.pathname.includes(\"/note/\") ) return;\n\n        return this.props.store.folders.map( (folder,i) => {\n            return (\n                <option\n                    key={i}\n                    value={folder.id}\n                >\n                    {folder.name}\n                </option>\n            );\n        });\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <ErrorBoundary message=\"Sidebar Section Error\">\n                    <SidebarSection \n                        store={this.props.store}\n                        history={this.props.history}\n                    />\n                </ErrorBoundary>\n                <ErrorBoundary message=\"Main Section Error\">\n                    <main className=\"section--main\">\n                        <form\n                            className=\"add--form\"\n                            onSubmit={(e)=>{\n                                e.preventDefault();\n                                this.handleOnSumbit(e.target);\n                            }}\n                        >   \n                            <div className=\"add--form--field\">\n                                <label htmlFor=\"noteName\">Name:</label>\n                                <input type=\"text\" id=\"noteName\" name=\"noteName\" required />\n                            </div>\n                            <div className=\"add--form--field\">\n                                <label htmlFor=\"noteContent\">Content:</label>\n                                <textarea id=\"noteContent\" name=\"noteContent\" required></textarea>\n                            </div>\n                            <div className=\"add--form--field\">\n                                <label htmlFor=\"folderId\">Folder:</label>\n                                <select name=\"folderId\" id=\"folderId\" required>\n                                    {this.getFolderList()}\n                                </select>\n                            </div>\n                            <div className=\"add--form--field\">\n                                <button type=\"submit\">Submit</button>\n                            </div>\n                        </form>\n                    </main>\n                </ErrorBoundary>\n            </div>\n        )\n    }\n}\n\nAddNote.propTypes = {\n    store: PropTypes.object.isRequired\n}\n\nexport default withRouter(AddNote);","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\n\nclass HeaderSection extends Component {\n    render(){\n        return (\n            <header>\n                <div className=\"header--spacer\"></div>\n                <div className=\"header--title\">\n                    <Link to={'/'}>\n                        <h1>Noteful</h1>\n                    </Link>\n                </div>\n            </header>\n       );\n    }\n}\n\nexport default withRouter(HeaderSection);","import React, { Component } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport FolderRoute from './components/routes/FolderRoute';\nimport MainRoute from './components/routes/MainRoute';\nimport NoteRoute from './components/routes/NoteRoute';\nimport NotFoundRoute from './components/routes/NotFoundRoute';\nimport AddFolder from './components/AddFolder';\nimport AddNote from './components/AddNote';\nimport HeaderSection from './components/sections/HeaderSection';\nimport DefaultContext from './components/context/DefaultContext';\n\nclass App extends Component {\n  \n  static contextType = DefaultContext;\n\n  state = {\n    store: {\n      folders: [],\n      notes: []\n    },\n    url: 'https://rocky-dawn-01034.herokuapp.com'\n    //url: 'http://localhost:8000'\n  }\n  updateStore = () => {\n    this.getFolders();\n    this.getNotes();\n  }\n  getFolders = () => {\n    fetch(`${this.state.url}/folders`)\n      .then( r=>r.json())\n      .then( r=>{\n        this.setState({\n          store: {\n            folders: r,\n            notes: this.state.store.notes\n          }\n        });\n      })\n      .catch( e => {\n          throw new Error(`Error retrieving folders: ${e.message}`);\n      } );\n  }\n  getNotes = () => {\n    fetch(`${this.state.url}/notes`)\n      .then( r=>r.json())\n      .then( r=>{\n        this.setState({\n          store: {\n            folders: this.state.store.folders,\n            notes: r\n          }\n        });\n      })\n      .catch( e => {\n          throw new Error(`Error retrieving notes: ${e.message}`);\n      } );\n  }\n  componentDidMount(){\n    this.updateStore();\n  }\n  render(){\n    const contextValue = {\n      ...this.state,\n      updateStore: this.updateStore\n    }\n\n    return (\n      <DefaultContext.Provider value={contextValue}>\n          <HashRouter >\n            <HeaderSection />\n            <Switch>\n              <Route \n                exact path='/'\n                render={()=><MainRoute store={this.state.store}/>}\n              />\n              <Route \n                path='/folder/:folderId'\n                render={()=><FolderRoute store={this.state.store}/>}\n              />\n              <Route \n                path='/note/:id'\n                render={()=><NoteRoute store={this.state.store}/>}\n              />\n              <Route \n                path='/add-folder/'\n                render={()=><AddFolder store={this.state.store}/>}\n              />\n              <Route \n                path='/add-note/'\n                render={()=><AddNote store={this.state.store}/>}\n              />\n              <Route \n                render={()=><NotFoundRoute />}\n              />\n            </Switch>\n        </HashRouter>\n      </DefaultContext.Provider>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render( <App />, document.getElementById('root') );"],"sourceRoot":""}